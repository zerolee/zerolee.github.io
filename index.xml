<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>琐碎录</title>
    <link>http://zerolee.github.io/</link>
    <description>Recent content on 琐碎录</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Sat, 12 Jan 2019 05:20:37 +0800</lastBuildDate>
    
	<atom:link href="http://zerolee.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>网址搜集</title>
      <link>http://zerolee.github.io/post/%E4%B8%80%E4%BA%9B%E7%BD%91%E5%9D%80%E6%90%9C%E9%9B%86/</link>
      <pubDate>Fri, 29 Apr 2022 21:14:14 +0800</pubDate>
      
      <guid>http://zerolee.github.io/post/%E4%B8%80%E4%BA%9B%E7%BD%91%E5%9D%80%E6%90%9C%E9%9B%86/</guid>
      <description>Emacs 库 iter2 iter2 是一个对自带的 generator 完全兼容的实现，它提供用 iter2-defun 和 iter2-lambda
替代自带的 iter-defun 和 iter-lambda。
至于其他的函数或者宏(如： iter-yield, iter-next) 用自带的就好了。
优点:
  支持 save-excursion 以及类似的 similar special forms 以及宏 save-match-data。
  生成器函数可以使用 Edebug 进行调试。
  更快地转换复杂的生成器函数。
  通常更快的结果函数。
  生成的代码要小得多，尤其是对于复杂的函数。
  更具可读性的结果函数和回溯。
  对生成的迭代器函数的内置跟踪支持。
  缺点
 因为iter2转换被高度优化，它不像原始generator包那样通用，因此更容易出现错误。  Async/Await for Emacs 这是受 TypeScript 的 Async/Await 实现启发的的一个简单实现。
依赖于自带的 generator.el 和 第三方 promise.el、 iter2
详细教程，请参阅 What about Async/Await?</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://zerolee.github.io/about/</link>
      <pubDate>Sat, 12 Jan 2019 05:20:37 +0800</pubDate>
      
      <guid>http://zerolee.github.io/about/</guid>
      <description>about me</description>
    </item>
    
    <item>
      <title>tmux 简介</title>
      <link>http://zerolee.github.io/post/tmux/</link>
      <pubDate>Sat, 12 Jan 2019 05:20:37 +0800</pubDate>
      
      <guid>http://zerolee.github.io/post/tmux/</guid>
      <description>基础知识 配置文件 ~/.tmux.conf tmux使用C/S模型构建，主要包括以下单元模块：
 server 服务器 :: 输入tmux命令时就开启了一个服务器。 session 会话 :: 一个服务器可以包含多个会话。 window 窗口 :: 一个会话可以包含多个窗口。 panel 面板 :: 一个窗口可以包含多个面板。  创建会话 创建一个会话
tmux new-session -s basic 或 tmux new -s basic 创建一个会话,并后台运行
tmux new -s basic -d 创建一个 basic 会话， 并将第一个窗口命名为 shell
tmux new -s basic -n shell 分离会话 前缀 + d (CTRL-b d)
查看会话 tmux list-sessions tmux ls 重新连接会话 tmux attach 如果只有一个会话的话 tmux attach -t second_session 不止一个会话 杀死会话 输入 exit ，即退出终端即可</description>
    </item>
    
    <item>
      <title>使用 Markdown</title>
      <link>http://zerolee.github.io/post/about_markdown/</link>
      <pubDate>Sat, 12 Jan 2019 05:20:37 +0800</pubDate>
      
      <guid>http://zerolee.github.io/post/about_markdown/</guid>
      <description>标题 Markdown 支持两者标题的语法, 类 Atx 和类 Setext 形式
Atx 文字前加 # 号即可, 总共六级标题
一级标题 二级标题 三级标题 Setext 文字下方加 - 或者 =, 数目任意
一级标题
===
二级标题
---
列表  无序列表 : 文字开头加上 - 或者 * 有序列表 1. 2. 3.  引用和脚注 &amp;gt; 引用
&amp;gt;&amp;gt; 嵌套引用
 引用
   嵌套引用
  文字内如[^2]
在文章末尾[^2]:脚注说明文字
图标与链接 插入链接 [Baidu](http://baidu.com) Baidu
插入图片 插入图片的地址需要图床,如 CloudApp
![Mou ico](http://mouapp.com/Mou_128.png)
粗体与斜体与删除 用两个 * 或者 _ 包含一段文本就是粗体的语法, 用一个则是斜体的语法</description>
    </item>
    
    <item>
      <title>利用 hugo 搭建博客</title>
      <link>http://zerolee.github.io/post/%E5%88%A9%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 12 Jan 2019 05:20:37 +0800</pubDate>
      
      <guid>http://zerolee.github.io/post/%E5%88%A9%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>hugo 与 主题下载   在 [hugo] (https://github.com/gohugoio/hugo/releases) 下载二进制的压缩包解压了放置于 PATH 路径下即可
  下载自己喜欢的主题 比如 light-hugo 或者 hugo-base16-theme
  配置   首先创建新站点(构造一个目录树1)
hugo new site my-blog
  将下载好的主题放置于 my-blog/themes 目录下
修改 my/config.toml 文件中的 themesdir 字段为 themes
  创建博客 post 目录：
mkdir content/post
  利用 Hugo 生成你的 post(你的 blog, 以 markdown 编写而成)
hugo new post/my-blog.md
提交文件中包括两个部分:
第一部分是以 &amp;mdash; 它包括了提交文档的主要数据，被称作前缀。 在前缀之后，才是正文。
   +++ title = &amp;quot;First Post&amp;quot; date = 2018-09-28T06:07:10+01:00 draft = false tags = [&amp;quot;Getting started&amp;quot;] categories = [] +++ Hello world!</description>
    </item>
    
  </channel>
</rss>